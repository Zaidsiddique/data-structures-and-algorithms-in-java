//Example 1:
//Input Format: arr[] = {1,2,4,7}, x = 6
//Result: 3
//Explanation: 6 is not present in the array. So, if we will insert 6 in the 3rd index(0-based indexing), the array will still be sorted. {1,2,4,6,7}.


class Solution {
    public int searchInsert(int[] nums, int target) {
        int n = nums.length; 
        int low = 0, high = n - 1;
        int ans = n;

        while (low <= high) {
            int mid = (low + high) / 2;
            if (nums[mid] >= target) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }
}